{"version":3,"sources":["webpack:///./src/components/SEO.jsx","webpack:///./src/components/Layout/Header.jsx","webpack:///./src/components/Layout/TableOfContents.jsx","webpack:///./src/templates/doc.jsx"],"names":["SEO","render","title","description","image","postURL","this","props","postNode","postPath","postSEO","postMeta","frontmatter","excerpt","cover","config","siteUrl","pathPrefix","siteTitle","siteDescription","siteLogo","realPrefix","blogURL","schemaOrgJSONLD","url","name","alternateName","siteTitleAlt","push","itemListElement","position","item","headline","content","type","JSON","stringify","property","siteFBAppID","userTwitter","Component","MainHeader","SiteContainer","Navigation","React","styled","div","theme","brand","Links","entries","StyledLinkList","map","key","entry","EntryListItem","to","childMarkdownRemark","fields","slug","EntryTitle","ChapterList","chapters","level","StyledChapterList","ChapterListItem","ChapterTitle","chapter","index","TableOfContents","TOCWrapper","sitePadding","ol","h6","li","h5","accentDark","accent","DocTemplate","pathContext","data","postBySlug","post","id","category_id","postDefaultCategoryID","location","BodyGrid","HeaderContainer","ToCContainer","tableOfContents","BodyContainer","dangerouslySetInnerHTML","__html","html","contentWidthLaptop","lightGrey","pageQuery"],"mappings":"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","file":"component---src-templates-doc-jsx-1e1adcf6afd9e8127e9c.js","sourcesContent":["import React, { Component } from 'react'\nimport Helmet from 'react-helmet'\nimport config from '../../data/SiteConfig'\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props\n    let title\n    let description\n    let image\n    let postURL\n    if (postSEO) {\n      const postMeta = postNode.frontmatter\n      title = postMeta.title\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt\n      image = postMeta.cover\n      postURL = config.siteUrl + config.pathPrefix + postPath\n    } else {\n      title = config.siteTitle\n      description = config.siteDescription\n      image = config.siteLogo\n    }\n    const realPrefix = config.pathPrefix === '/' ? '' : config.pathPrefix\n    image = config.siteUrl + realPrefix + image\n    const blogURL = config.siteUrl + config.pathPrefix\n    const schemaOrgJSONLD = [\n      {\n        '@context': 'http://schema.org',\n        '@type': 'WebSite',\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : ''\n      }\n    ]\n    if (postSEO) {\n      schemaOrgJSONLD.push([\n        {\n          '@context': 'http://schema.org',\n          '@type': 'BreadcrumbList',\n          itemListElement: [\n            {\n              '@type': 'ListItem',\n              position: 1,\n              item: {\n                '@id': postURL,\n                name: title,\n                image\n              }\n            }\n          ]\n        },\n        {\n          '@context': 'http://schema.org',\n          '@type': 'BlogPosting',\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : '',\n          headline: title,\n          image: {\n            '@type': 'ImageObject',\n            url: image\n          },\n          description\n        }\n      ])\n    }\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : ''}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={config.userTwitter ? config.userTwitter : ''}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    )\n  }\n}\n\nexport default SEO\n","import React from 'react'\nimport styled from 'styled-components'\nimport Navigation from './Navigation'\n\nclass MainHeader extends React.Component {\n  render() {\n    return (\n      <SiteContainer>\n        <Navigation />\n      </SiteContainer>\n    )\n  }\n}\n\nconst SiteContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  background: ${props => props.theme.brand};\n  padding: 25px;\n`\n\nexport default MainHeader\n","import React from 'react'\nimport Link from 'gatsby-link'\nimport styled from 'styled-components'\n\n/* eslint react/no-array-index-key: \"off\" */\n\nconst Links = ({ entries }) => (\n  <StyledLinkList>\n    {entries.map(({ entry }, key) => (\n      <EntryListItem key={key}>\n        <Link to={entry.childMarkdownRemark.fields.slug}>\n          <EntryTitle>{entry.childMarkdownRemark.frontmatter.title}</EntryTitle>\n        </Link>\n      </EntryListItem>\n    ))}\n  </StyledLinkList>\n)\n\nconst ChapterList = ({ chapters, entries, title, level = 0 }) => (\n  <StyledChapterList>\n    {title && (\n      <ChapterListItem key={`${title}${level}`}>\n        <ChapterTitle level={level}>{title}</ChapterTitle>\n      </ChapterListItem>\n    )}\n    <ChapterListItem>{entries && <Links entries={entries} />}</ChapterListItem>\n    <ChapterListItem>\n      {chapters &&\n        chapters.map((chapter, index) => (\n          <ChapterList {...chapter} level={level + 1} key={`${index}`} />\n        ))}\n    </ChapterListItem>\n  </StyledChapterList>\n)\n\nconst TableOfContents = ({ chapters }) => (\n  <TOCWrapper>\n    {chapters.map((chapter, index) => (\n      <ChapterList {...chapter} key={index} />\n    ))}\n  </TOCWrapper>\n)\n\nexport default TableOfContents\n\nconst TOCWrapper = styled.div`\n  padding: ${props => props.theme.sitePadding};\n  margin: 0;\n`\n\nconst StyledChapterList = styled.ol`\n  list-style: none;\n  margin: 0;\n`\n\nconst StyledLinkList = styled.ol`\n  list-style: none;\n`\n\nconst EntryTitle = styled.h6`\n  display: inline-block;\n  font-weight: 200;\n  color: black;\n  margin: 0;\n  line-height: 1.5;\n  border-bottom: 1px solid transparent;\n  text-decoration: none;\n`\n\nconst ChapterListItem = styled.li`\n  margin: 0;\n`\n\nconst EntryListItem = styled.li`\n  margin: 0;\n  a:hover {\n    border-bottom: 1px solid black;\n  }\n`\n\nconst ChapterTitle = styled.h5`\n  font-weight: ${({ level }) => {\n    switch (level % 3) {\n      case 1:\n        return '600'\n      case 2:\n        return '400'\n      default:\n        return '200'\n    }\n  }};\n  font-size: ${({ level }) => {\n    switch (level % 3) {\n      case 1:\n        return '2.2rem'\n      case 2:\n        return '1.8rem'\n      default:\n        return '2.8rem'\n    }\n  }};\n  color: ${({ level, theme }) => {\n    switch (level % 3) {\n      case 1:\n        return 'black'\n      case 2:\n        return theme.accentDark\n      default:\n        return theme.accent\n    }\n  }};\n`\n","import { graphql } from 'gatsby'\n\nimport React from 'react'\nimport Helmet from 'react-helmet'\nimport styled from 'styled-components'\n\nimport SEO from '../components/SEO'\nimport SiteHeader from '../components/Layout/Header'\nimport config from '../../data/SiteConfig'\nimport TableOfContents from '../components/Layout/TableOfContents'\nimport Layout from '../layouts'\n\nexport default class DocTemplate extends React.Component {\n  render() {\n    const { slug } = this.props.pathContext\n    const postNode = this.props.data.postBySlug\n    const post = postNode.frontmatter\n    if (!post.id) {\n      post.id = slug\n    }\n    if (!post.id) {\n      post.category_id = config.postDefaultCategoryID\n    }\n    return (\n      <Layout location={this.props.location}>\n        <div>\n          <Helmet>\n            <title>{`${post.title} | ${config.siteTitle}`}</title>\n          </Helmet>\n          <SEO postPath={slug} postNode={postNode} postSEO />\n          <BodyGrid>\n            <HeaderContainer>\n              <SiteHeader location={this.props.location} />\n            </HeaderContainer>\n            <ToCContainer>\n              <TableOfContents\n                chapters={this.props.data.tableOfContents.chapters}\n              />\n            </ToCContainer>\n            <BodyContainer>\n              <div>\n                <h1>{post.title}</h1>\n                <div dangerouslySetInnerHTML={{ __html: postNode.html }} />\n              </div>\n            </BodyContainer>\n          </BodyGrid>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nconst BodyGrid = styled.div`\n  height: 100vh;\n  display: grid;\n  grid-template-rows: 75px 1fr;\n  grid-template-columns: 300px 1fr;\n\n  @media screen and (max-width: 600px) {\n    display: flex;\n    flex-direction: column;\n    height: inherit;\n  }\n`\n\nconst BodyContainer = styled.div`\n  grid-column: 2 / 3;\n  grid-row: 2 / 3;\n  overflow: scroll;\n  justify-self: center;\n  width: 100%;\n  padding: ${props => props.theme.sitePadding};\n  @media screen and (max-width: 600px) {\n    order: 2;\n  }\n\n  & > div {\n    max-width: ${props => props.theme.contentWidthLaptop};\n    margin: auto;\n  }\n\n  & > h1 {\n    color: ${props => props.theme.accentDark};\n  }\n`\n\nconst HeaderContainer = styled.div`\n  grid-column: 1 / 3;\n  grid-row: 1 / 2;\n  z-index: 2;\n  @media screen and (max-width: 600px) {\n    order: 1;\n  }\n`\n\nconst ToCContainer = styled.div`\n  grid-column: 1 / 2;\n  grid-row: 2 / 3;\n  background: ${props => props.theme.lightGrey};\n  overflow: scroll;\n  @media screen and (max-width: 600px) {\n    order: 3;\n    overflow: inherit;\n  }\n`\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query DocBySlug($slug: String!) {\n    postBySlug: markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n      }\n    }\n    tableOfContents: docsJson {\n      chapters {\n        title\n        entries {\n          entry {\n            id\n            childMarkdownRemark {\n              fields {\n                slug\n              }\n              frontmatter {\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}